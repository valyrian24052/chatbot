# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eXenvP7zkFf0sDNZ-ljlta7WP8n1DIMe
"""

# for nlp
import nltk
nltk.download('punkt')
from nltk.stem.lancaster import LancasterStemmer
stemmer=LancasterStemmer()

# for tensorflow
import tensorflow as tf
import numpy as np
import tflearn
import random
import json
!pip install tflearn

from google.colab import files
files.upload()

with open('intents.json') as json.data:
  intents = json.load(json.data)

words=[]
classes=[]
documents=[]
ignore=['?']

for intent in intents['intents']:
  for pattern in intent['patterns']:
    #w is just tokenized words from class pattern
    w=nltk.word_tokenize(pattern)
    words.extend(w)
    #doc contains w with their respective tags
    documents.append((w, intent['tag']))
    if intent['tag'] not in classes:
      classes.append(intent['tag'])

words=[stemmer.stem((w.lower())) for w in words if not w in ignore]
words=sorted(list(set(words)))
sorted(list(set(classes)))

training=[]
output=[]
output_empty=[0]*len(classes)

for doc in documents:
  bag=[]
  pattern_words=doc[0]
  pattern_words=[stemmer.stem((word.lower())) for word in pattern_words]
  for w in words: 
    bag.append(1) if w in pattern_words else bag.append(0)
  output_row = list(output_empty)
  output_row[classes.index(doc[1])] = 1

  training.append([bag, output_row])

random.shuffle(training)
training = np.array(training)

train_x = list(training[:,0])
train_y = list(training[:,1])

tf.compat.v1.reset_default_graph()

net = tflearn.input_data(shape=[None, len(train_x[0])])
net = tflearn.fully_connected(net, 10)
net = tflearn.fully_connected(net, 10)
net = tflearn.fully_connected(net, len(train_y[0]), activation='softmax')
net = tflearn.regression(net)

model = tflearn.DNN(net, tensorboard_dir='tflearn_logs')

model.fit(train_x, train_y, n_epoch=1000, batch_size=8, show_metric=True)
model.save('model.tflearn')

import pickle
pickle.dump( {'words':words, 'classes':classes, 'train_x':train_x, 'train_y':train_y}, open( "training_data", "wb" ) )
data = pickle.load( open( "training_data", "rb" ) )

words = data['words']
classes = data['classes']
train_x = data['train_x']
train_y = data['train_y']

with open('intents.json') as json_data:
    intents = json.load(json_data)

model.load('./model.tflearn')

def clean_up_sentence(sentence):
    sentence_words = nltk.word_tokenize(sentence)
    sentence_words = [stemmer.stem(word.lower()) for word in sentence_words]
    return sentence_words


def bow(sentence, words, show_details=False):
    sentence_words = clean_up_sentence(sentence)
    bag = [0]*len(words)  
    for s in sentence_words:
        for i,w in enumerate(words):
            if w == s: 
                bag[i] = 1
                if show_details:
                    print ("found in bag: %s" % w)

    return(np.array(bag))
ERROR_THRESHOLD = 0.30
def classify(sentence):
     results = model.predict([bow(sentence, words)])[0]
     results = [[i,r] for i,r in enumerate(results) if r>ERROR_THRESHOLD]
     results.sort(key=lambda x: x[1], reverse=True)
     return_list = []
     for r in results:
        return_list.append((classes[r[0]], r[1]))
    
     return return_list

def response(sentence, userID='123', show_details=False):
    results = classify(sentence)
    if results:
        while results:
            for i in intents['intents']:
                if i['tag'] == results[0][0]:
                    return print(random.choice(i['responses']))

            results.pop(0)

classify('What are you hours of operation?')

response('What are you hours of operation?')

response('What is menu for today?')